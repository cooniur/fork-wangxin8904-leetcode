public class Solution {
    private int rowNum;
    
    private void getRow(int[][] m, int target, int start, int end) {
        if(start > end) return;
 
        int mid = (start + end) / 2;
        if(m[mid][0] == target) {
            rowNum = mid;
            return;
        } else if(m[mid][0] > target) {
            if(mid - 1 >= 0 && m[mid-1][0] <= target) {
                rowNum = mid - 1; return;
            }
            if(mid - 1 < 0) {
                rowNum = -1; return;
            }
            getRow(m, target, start, mid - 1);
        } else if(m[mid][0] < target) {
            if(mid + 1 < m.length && m[mid+1][0] > target) {
                rowNum = mid; return;
            } 
            if(mid + 1 == m.length) {
                rowNum = mid; return;
            }
            getRow(m, target, mid+1, end);
        }
               
    }
    
    private int getCol(int[][] m, int target, int row, int start, int end) {
        if(start > end) return -1;
        
        int mid = (start + end) / 2;
        if(m[row][mid] == target) return mid;
        
        if(m[row][mid] > target) return getCol(m, target, row, start, mid - 1);
        else return getCol(m, target, row, mid + 1, end);
        
        
    }
    
    public boolean searchMatrix(int[][] matrix, int target) {
        // IMPORTANT: Please reset any member data you declared, as
        // the same Solution instance will be reused for each test case.
        rowNum = -1;
        getRow(matrix, target, 0, matrix.length);
        if(rowNum == -1) return false;
        
        int test = getCol(matrix, target, rowNum, 0, matrix[rowNum].length - 1);
        if(test == -1) return false;
        else return true;
        
    }
}