public class Solution {
    private boolean flag = false;
    
    private void dfs(char[][] board, String word, int i, int j, boolean[][] check) {
        if(flag) return;
        
        char c = word.charAt(0);
        if(board[i][j] != c) return;
        
        String rest = word.substring(1, word.length());
        if(rest.length() == 0) {
            flag = true;
            return;            
        }
        
        else {
            if( i > 0 && !check[i - 1][j]) { // up
                check[i - 1][j] = true;
                dfs(board, rest, i - 1, j, check);
                check[i - 1][j] = false;
            }
            if( j > 0 && !check[i][j - 1]) { //left
                check[i][j - 1] = true;
                dfs(board, rest, i, j - 1, check);
                check[i][j - 1] = false;                
            }
            if( i < board.length - 1 && !check[i + 1][j]) {
                check[i + 1][j] = true;
                dfs(board, rest, i + 1, j, check);
                check[i + 1][j] = false;                
            }
            if( j < board[0].length - 1 && !check[i][j + 1]) {
                check[i][j + 1] = true;
                dfs(board, rest, i, j + 1, check);
                check[i][j + 1] = false;                
            }
        }
    }
    
    public boolean exist(char[][] board, String word) {
        // IMPORTANT: Please reset any member data you declared, as
        // the same Solution instance will be reused for each test case.
        boolean[][] check = new boolean[board.length][board[0].length];
        flag = false;
        
        for(int i = 0; i < board.length; i++) {
            for(int j = 0; j < board[0].length; j++) {
                if(board[i][j] == word.charAt(0) && !flag) {
                	check[i][j] = true;
                    dfs(board, word, i , j , check);
                    check[i][j] = false;
                }
            }
        }
        
        return flag;
    }
}