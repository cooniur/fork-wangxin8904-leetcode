public class Solution {
    private boolean[][] board = null;
    private ArrayList<String[]> ans = null;
    
    private boolean isOK(int row, int col) {
        boolean flag = true;
        
        for(int i = 0; i < board.length; i++) {
            if(board[row][i]) return false;
            if(board[i][col]) return false;
        }
        
        for(int i = 0; i < board.length; i++) {
            for(int j = 0; j < board.length; j++) {
                if(i + j == row + col && board[i][j]) {
                    return false;
                }
                if(i - j == row - col && board[i][j]) {
                    return false;
                }
            }
        }
        
        return flag;
    }
    
    private void dfs(int N, int level) {
        if(level == 0) { // 
        	String[] arr = new String[N];
            
            for(int i = 0; i < N; i++) {
            	StringBuffer sb = new StringBuffer();
                for(int j = 0; j < N; j++) {
                    if(board[i][j]) sb.append("Q");
                    else sb.append(".");
                }
                arr[i] = sb.toString();
            }
            ans.add(arr);
            return;
        }
        
        int curR = N - level;
        for(int col = 0; col < N; col++) {
            if(isOK(curR, col)) {
                board[curR][col] = true;
                dfs(N, level - 1);
                board[curR][col] = false;
            }
        }
        
    }
    
    public ArrayList<String[]> solveNQueens(int n) {
        board = new boolean[n][n];
        ans = new ArrayList<String[]>();
        
        int curR = n - n;
        for(int i = 0; i < n; i++) {
            board[curR][i] = true;
            dfs(n, n - 1);
            board[curR][i] = false;
        }
        
        return ans;
    }
}