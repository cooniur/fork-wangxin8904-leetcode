

public class Solution {
    //http://www.cnblogs.com/lichen782/p/leetcode_Largest_Rectangle_in_Histogram.html
    
    public int largestRectangleArea(int[] height) {
        Stack<Integer> stack = new Stack<Integer>();
        
        int[] h = new int[height.length + 1];
        for(int i = 0; i < height.length; i++) h[i] = height[i];
        
        int maxArea = 0;
        
        int i = 0;
        while(i < h.length) {
            if(stack.isEmpty() || h[i] >= h[stack.peek()]) {
                stack.push(i++);
            } else {
                int temp = stack.pop();
                int curArea = h[temp] * ( stack.isEmpty() ? i : i - stack.peek() - 1 );  // **??
                if(curArea > maxArea) maxArea = curArea;
            }
        }
        
        return maxArea;
    }
}


--------------------------TLE----------------------------------
public class Solution {
    public int largestRectangleArea(int[] height) {
        if(height.length < 1) return 0;
        
        int[] dp = new int[height.length];
        
        for(int i = 0; i < height.length; i++) {
            int maxArea = 0;
            int minH = height[i];
            for(int j = i; j >= 0; j--) {
                if(height[j] < minH) minH = height[j];
                int cur = (i - j + 1) * minH;
                if(cur > maxArea) maxArea = cur;
            }
            dp[i] = maxArea;
        }
        
        int ans = 0;
        for(int i = 0; i < dp.length; i++)
            if(dp[i] > ans) ans = dp[i];
            
        return ans;
    }
}