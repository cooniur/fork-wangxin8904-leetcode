public class Solution {
    public int maxProfit(int[] prices) {
        if(prices == null || prices.length <= 1 ) return 0;

        int[] forward = new int[prices.length];
        int[] backward = new int[prices.length];
        
        int curMin = Integer.MAX_VALUE;
        for(int i = 0 ; i < prices.length; i++) {
            if(prices[i] >= curMin) {
                forward[i] = (prices[i] - curMin > forward[i - 1]) ? prices[i] - curMin : forward[i - 1];
                
            } else {
                if(i > 0) forward[i] = forward[i - 1];
                curMin = prices[i];
            }
        }
        
        int curMax = Integer.MIN_VALUE;
        for(int j = prices.length - 1; j >= 0; j--) {
            if(prices[j] <= curMax) {
                backward[j] = (curMax - prices[j] > backward[j + 1])  ? curMax - prices[j] : backward[j + 1] ; 
            } else {
                if(j < prices.length - 1) backward[j] = backward[j + 1] ;
                curMax = prices[j];
            }
        }
        
        int ans = 0;
        for(int i = 0; i < prices.length ; i++) {
        	if(i < prices.length - 1)
        		ans = (ans > forward[i] + backward[i + 1]) ? ans : forward[i] + backward[i];
        	else 
        		ans = (ans > forward[i]) ? ans : forward[i];
        }
        return ans;
    }
}