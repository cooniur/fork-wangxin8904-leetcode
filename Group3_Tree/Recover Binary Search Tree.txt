/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    private TreeNode pre = null;
    private TreeNode wrong1 = null;
    private TreeNode wrong2 = null;
    private int status = 0;
    
    private void dfs(TreeNode cur) {
        if(cur == null) return;
        if(status == 2) return;
        
        dfs(cur.left);

        if(pre != null && cur != null) {
            if(pre.val >= cur.val) {
                if(status == 0) {
                    // the first wrong element is bigger than its next one
                    wrong1 = pre; wrong2 = cur;
                    status = 1;
                } else if (status == 1) {
                    // the second wrong element is less than its previous one
                    wrong2 = cur;  
                    status = 2;
                }
            }
        }
        
        //TreeNode prepre = pre;
        this.pre = cur;
        
        dfs(cur.right);
    }
    
    public void recoverTree(TreeNode root) {
        // IMPORTANT: Please reset any member data you declared, as
        // the same Solution instance will be reused for each test case.
        this.pre = null;
        this.wrong1 = null;
        this.wrong2 = null;
        this.status = 0;
        
        dfs(root);
        
        int temp = wrong1.val;
        wrong1.val = wrong2.val;
        wrong2.val = temp;
    
    }
}